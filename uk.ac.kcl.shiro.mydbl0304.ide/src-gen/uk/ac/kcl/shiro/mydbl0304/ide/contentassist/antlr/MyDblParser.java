/*
 * generated by Xtext 2.21.0
 */
package uk.ac.kcl.shiro.mydbl0304.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import uk.ac.kcl.shiro.mydbl0304.ide.contentassist.antlr.internal.InternalMyDblParser;
import uk.ac.kcl.shiro.mydbl0304.services.MyDblGrammarAccess;

public class MyDblParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(MyDblGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, MyDblGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getInstructionsAccess().getAlternatives(), "rule__Instructions__Alternatives");
			builder.put(grammarAccess.getAttributeTypeAccess().getAlternatives(), "rule__AttributeType__Alternatives");
			builder.put(grammarAccess.getBasicVarAccess().getAlternatives(), "rule__BasicVar__Alternatives");
			builder.put(grammarAccess.getFindInstructionAccess().getAlternatives_2(), "rule__FindInstruction__Alternatives_2");
			builder.put(grammarAccess.getSingleConditionUnitAccess().getAlternatives_2(), "rule__SingleConditionUnit__Alternatives_2");
			builder.put(grammarAccess.getJointConditionUnitAccess().getAlternatives_2(), "rule__JointConditionUnit__Alternatives_2");
			builder.put(grammarAccess.getJudgementAccess().getAlternatives(), "rule__Judgement__Alternatives");
			builder.put(grammarAccess.getDatabaseAccess().getGroup(), "rule__Database__Group__0");
			builder.put(grammarAccess.getCreateTableInstructionAccess().getGroup(), "rule__CreateTableInstruction__Group__0");
			builder.put(grammarAccess.getCreateElementInstructionAccess().getGroup(), "rule__CreateElementInstruction__Group__0");
			builder.put(grammarAccess.getCreateAttributeInstructionAccess().getGroup(), "rule__CreateAttributeInstruction__Group__0");
			builder.put(grammarAccess.getAddInstructionAccess().getGroup(), "rule__AddInstruction__Group__0");
			builder.put(grammarAccess.getInsertInstructionAccess().getGroup(), "rule__InsertInstruction__Group__0");
			builder.put(grammarAccess.getInsertInstructionAccess().getGroup_1(), "rule__InsertInstruction__Group_1__0");
			builder.put(grammarAccess.getSetAttributeInstructionAccess().getGroup(), "rule__SetAttributeInstruction__Group__0");
			builder.put(grammarAccess.getFindInstructionAccess().getGroup(), "rule__FindInstruction__Group__0");
			builder.put(grammarAccess.getSingleElementAccess().getGroup(), "rule__SingleElement__Group__0");
			builder.put(grammarAccess.getSingleElementAccess().getGroup_0(), "rule__SingleElement__Group_0__0");
			builder.put(grammarAccess.getSingleElementAccess().getGroup_2(), "rule__SingleElement__Group_2__0");
			builder.put(grammarAccess.getTargetAccess().getGroup(), "rule__Target__Group__0");
			builder.put(grammarAccess.getTargetAccess().getGroup_1(), "rule__Target__Group_1__0");
			builder.put(grammarAccess.getJointElementAccess().getGroup(), "rule__JointElement__Group__0");
			builder.put(grammarAccess.getJointElementAccess().getGroup_1(), "rule__JointElement__Group_1__0");
			builder.put(grammarAccess.getSingleConditionAccess().getGroup(), "rule__SingleCondition__Group__0");
			builder.put(grammarAccess.getSingleConditionAccess().getGroup_1(), "rule__SingleCondition__Group_1__0");
			builder.put(grammarAccess.getJointConditionAccess().getGroup(), "rule__JointCondition__Group__0");
			builder.put(grammarAccess.getJointConditionAccess().getGroup_1(), "rule__JointCondition__Group_1__0");
			builder.put(grammarAccess.getSingleConditionUnitAccess().getGroup(), "rule__SingleConditionUnit__Group__0");
			builder.put(grammarAccess.getJointConditionUnitAccess().getGroup(), "rule__JointConditionUnit__Group__0");
			builder.put(grammarAccess.getAttributeOfElementAccess().getGroup(), "rule__AttributeOfElement__Group__0");
			builder.put(grammarAccess.getJudgementAccess().getGroup_3(), "rule__Judgement__Group_3__0");
			builder.put(grammarAccess.getJudgementAccess().getGroup_4(), "rule__Judgement__Group_4__0");
			builder.put(grammarAccess.getJudgementAccess().getGroup_5(), "rule__Judgement__Group_5__0");
			builder.put(grammarAccess.getJudgementAccess().getGroup_6(), "rule__Judgement__Group_6__0");
			builder.put(grammarAccess.getJudgementAccess().getGroup_7(), "rule__Judgement__Group_7__0");
			builder.put(grammarAccess.getJudgementAccess().getGroup_8(), "rule__Judgement__Group_8__0");
			builder.put(grammarAccess.getDeleteInstructionAccess().getGroup(), "rule__DeleteInstruction__Group__0");
			builder.put(grammarAccess.getDatabaseAccess().getNameAssignment_3(), "rule__Database__NameAssignment_3");
			builder.put(grammarAccess.getDatabaseAccess().getInstructionsAssignment_4(), "rule__Database__InstructionsAssignment_4");
			builder.put(grammarAccess.getCreateTableInstructionAccess().getTableAssignment_4(), "rule__CreateTableInstruction__TableAssignment_4");
			builder.put(grammarAccess.getCreateTableInstructionAccess().getElementAssignment_5(), "rule__CreateTableInstruction__ElementAssignment_5");
			builder.put(grammarAccess.getTableAccess().getNameAssignment(), "rule__Table__NameAssignment");
			builder.put(grammarAccess.getCreateElementInstructionAccess().getElementAssignment_5(), "rule__CreateElementInstruction__ElementAssignment_5");
			builder.put(grammarAccess.getElementAccess().getNameAssignment(), "rule__Element__NameAssignment");
			builder.put(grammarAccess.getCreateAttributeInstructionAccess().getElementAssignment_0(), "rule__CreateAttributeInstruction__ElementAssignment_0");
			builder.put(grammarAccess.getCreateAttributeInstructionAccess().getAttributeAssignment_4(), "rule__CreateAttributeInstruction__AttributeAssignment_4");
			builder.put(grammarAccess.getCreateAttributeInstructionAccess().getAttributeTypeAssignment_8(), "rule__CreateAttributeInstruction__AttributeTypeAssignment_8");
			builder.put(grammarAccess.getAttributeAccess().getNameAssignment(), "rule__Attribute__NameAssignment");
			builder.put(grammarAccess.getBasicVarAccess().getIntegerAssignment_0(), "rule__BasicVar__IntegerAssignment_0");
			builder.put(grammarAccess.getBasicVarAccess().getStringAssignment_1(), "rule__BasicVar__StringAssignment_1");
			builder.put(grammarAccess.getAddInstructionAccess().getElementAssignment_2(), "rule__AddInstruction__ElementAssignment_2");
			builder.put(grammarAccess.getAddInstructionAccess().getInsertInstructionAssignment_4(), "rule__AddInstruction__InsertInstructionAssignment_4");
			builder.put(grammarAccess.getInsertInstructionAccess().getSetAttributeInstructionsAssignment_0(), "rule__InsertInstruction__SetAttributeInstructionsAssignment_0");
			builder.put(grammarAccess.getInsertInstructionAccess().getSetAttributeInstructionsAssignment_1_1(), "rule__InsertInstruction__SetAttributeInstructionsAssignment_1_1");
			builder.put(grammarAccess.getSetAttributeInstructionAccess().getAttributeAssignment_0(), "rule__SetAttributeInstruction__AttributeAssignment_0");
			builder.put(grammarAccess.getSetAttributeInstructionAccess().getAttributeValueAssignment_2(), "rule__SetAttributeInstruction__AttributeValueAssignment_2");
			builder.put(grammarAccess.getSingleElementAccess().getTargetsAssignment_0_0(), "rule__SingleElement__TargetsAssignment_0_0");
			builder.put(grammarAccess.getSingleElementAccess().getElementAssignment_1(), "rule__SingleElement__ElementAssignment_1");
			builder.put(grammarAccess.getSingleElementAccess().getConditionsAssignment_2_2(), "rule__SingleElement__ConditionsAssignment_2_2");
			builder.put(grammarAccess.getTargetAccess().getAttributesAssignment_0(), "rule__Target__AttributesAssignment_0");
			builder.put(grammarAccess.getTargetAccess().getAttributesAssignment_1_1(), "rule__Target__AttributesAssignment_1_1");
			builder.put(grammarAccess.getJointElementAccess().getElementsAssignment_0(), "rule__JointElement__ElementsAssignment_0");
			builder.put(grammarAccess.getJointElementAccess().getElementsAssignment_1_1(), "rule__JointElement__ElementsAssignment_1_1");
			builder.put(grammarAccess.getJointElementAccess().getConditionsAssignment_5(), "rule__JointElement__ConditionsAssignment_5");
			builder.put(grammarAccess.getSingleConditionAccess().getConditionsAssignment_0(), "rule__SingleCondition__ConditionsAssignment_0");
			builder.put(grammarAccess.getSingleConditionAccess().getConditionsAssignment_1_1(), "rule__SingleCondition__ConditionsAssignment_1_1");
			builder.put(grammarAccess.getJointConditionAccess().getConditionsAssignment_0(), "rule__JointCondition__ConditionsAssignment_0");
			builder.put(grammarAccess.getJointConditionAccess().getConditionsAssignment_1_1(), "rule__JointCondition__ConditionsAssignment_1_1");
			builder.put(grammarAccess.getSingleConditionUnitAccess().getAttributeLeftAssignment_0(), "rule__SingleConditionUnit__AttributeLeftAssignment_0");
			builder.put(grammarAccess.getSingleConditionUnitAccess().getJudgementAssignment_1(), "rule__SingleConditionUnit__JudgementAssignment_1");
			builder.put(grammarAccess.getSingleConditionUnitAccess().getAttributeRightAssignment_2_0(), "rule__SingleConditionUnit__AttributeRightAssignment_2_0");
			builder.put(grammarAccess.getSingleConditionUnitAccess().getValueAssignment_2_1(), "rule__SingleConditionUnit__ValueAssignment_2_1");
			builder.put(grammarAccess.getJointConditionUnitAccess().getElementLeftAssignment_0(), "rule__JointConditionUnit__ElementLeftAssignment_0");
			builder.put(grammarAccess.getJointConditionUnitAccess().getJudgementAssignment_1(), "rule__JointConditionUnit__JudgementAssignment_1");
			builder.put(grammarAccess.getJointConditionUnitAccess().getElementRightAssignment_2_0(), "rule__JointConditionUnit__ElementRightAssignment_2_0");
			builder.put(grammarAccess.getJointConditionUnitAccess().getValueAssignment_2_1(), "rule__JointConditionUnit__ValueAssignment_2_1");
			builder.put(grammarAccess.getAttributeOfElementAccess().getElementAssignment_0(), "rule__AttributeOfElement__ElementAssignment_0");
			builder.put(grammarAccess.getAttributeOfElementAccess().getAttributeAssignment_2(), "rule__AttributeOfElement__AttributeAssignment_2");
			builder.put(grammarAccess.getDeleteInstructionAccess().getElementAssignment_2(), "rule__DeleteInstruction__ElementAssignment_2");
			builder.put(grammarAccess.getDeleteInstructionAccess().getConditionsAssignment_5(), "rule__DeleteInstruction__ConditionsAssignment_5");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private MyDblGrammarAccess grammarAccess;

	@Override
	protected InternalMyDblParser createParser() {
		InternalMyDblParser result = new InternalMyDblParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MyDblGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MyDblGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
