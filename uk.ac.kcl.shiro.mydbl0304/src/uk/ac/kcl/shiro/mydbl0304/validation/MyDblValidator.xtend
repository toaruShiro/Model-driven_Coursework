/*
 * generated by Xtext 2.21.0
 */
package uk.ac.kcl.shiro.mydbl0304.validation
import org.eclipse.xtext.validation.Check
import uk.ac.kcl.shiro.mydbl0304.myDbl.*
import org.eclipse.emf.common.util.EList
import uk.ac.kcl.shiro.mydbl0304.myDbl.Instructions
import java.util.List
import java.util.ArrayList

/** 
 * This class contains custom validation rules. 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class MyDblValidator extends AbstractMyDblValidator {
	
	public static final String UPPER_CASE_ATTRIBUTE_NAME="upperCaseAttributeName"
	
	public static final String INVALID_ATTRIBUTE_NAME="invalidAttributeName"
	
	public static final String UNDEFINED_ELEMENT_NAME="undefinedElementName"
	
	
	@Check(NORMAL)
	def void checkFormatedAttributeName(Database db) {
		db.instructions.checkCorrectNaming();
	}
	
	def void checkCorrectNaming(EList<Instructions> statements) { 
        for(var int i = 0; i < statements.size(); i++){
        	if(statements.get(i) instanceof CreateAttributeInstruction){
        		var CreateAttributeInstruction ins = statements.get(i) as CreateAttributeInstruction;
        		ins.checkUpperCaseAttributeName(statements);
        	}
        }
	}
	
	@Check(FAST)
	def void checkAvailableAttributeName(Database db) {
		db.instructions.checkCorrectSemantic();
	}
	
	def void checkCorrectSemantic(EList<Instructions> statements) { 
        for(var int i = 0; i < statements.size(); i++){
        	if(statements.get(i) instanceof FindInstruction){
        		var FindInstruction ins = statements.get(i) as FindInstruction;
        		ins.checkAlwaysHaveCorrectAttribute(statements);
        	}
        	
        	if(statements.get(i) instanceof AddInstruction){
        		var AddInstruction ins = statements.get(i) as AddInstruction;
        		ins.checkCorrectAttribute(statements);
        	}
        }
	}
	
	
	def void checkUpperCaseAttributeName(CreateAttributeInstruction createAttributeInstruction, EList<Instructions> statements) {
		var String attributeName = createAttributeInstruction.attribute.name
		for (var int i=0; i < attributeName.length(); i++) {
			if (Character.isUpperCase(attributeName.charAt(i))) {
				warning("Name should not contain upper case, please use \"_\" instead", createAttributeInstruction.attribute,
					MyDblPackage.Literals.ATTRIBUTE__NAME, UPPER_CASE_ATTRIBUTE_NAME
				) 
			}
		}
	}
	
	def void checkAlwaysHaveCorrectAttribute(FindInstruction statement, EList<Instructions> statements) {
		if(statement instanceof SingleElement){
        		var SingleElement ins = statement as SingleElement;
        		ins.checkAlwaysHaveCorrectTarget(statements);
        }
        
        if(statement instanceof JointElement){
        		var JointElement ins = statement as JointElement;
        		ins.checkAlwaysHaveCorrectTarget(statements);
        }
	}
	
	//Single element: find the xxx, xxx, xxx of teacher, whose xxx
	def void checkAlwaysHaveCorrectTarget(SingleElement statement, EList<Instructions> statements) {
        
        //如果该single element没有target且没有conditions
        if(statement.targets === null && statement.conditions === null){
        		return;
        }
        
        var List<Attribute> attributeList = new ArrayList<Attribute>();
        
        //找出所有element为teacher的CreateAttributeInstruction
        for(var int i = 0; i < statements.size(); i++){
        	if(statements.get(i) instanceof CreateAttributeInstruction){
        		var CreateAttributeInstruction createAttributeInstruction = statements.get(i) as CreateAttributeInstruction;
        		var String elementName = createAttributeInstruction.getElementName();
        		if(elementName.equals(statement.element.name)){
        			attributeList.add(createAttributeInstruction.attribute);
        		}
        	}
        }
        
        if(statement.targets !== null){
        	for(var int i = 0; i < statement.targets.attributes.size; i++){
                judgeAttributeName(statement.targets.attributes.get(i), attributeList, statement.element.name);
            }
        }
        
        if(statement.conditions !== null){
        	for(var int i = 0; i < statement.conditions.conditions.size; i++){
                judgeSingleCondition(statement.conditions.conditions.get(i), attributeList, statement.element.name);
            }
        }
	}
	
	def String getElementName(CreateAttributeInstruction instruction){
		return instruction.element.name;
	}
	
	def String getAttributeName(CreateAttributeInstruction instruction){
		return instruction.attribute.name;
	}
	
	//如果该attribute不在此attributelist里，提示错误
	def void judgeAttributeName(Attribute attribute, List<Attribute> attributeList, String elementName){
		for(var int i = 0; i < attributeList.size(); i++){
            if(attribute.name.equals(attributeList.get(i).name)){
        	    return;
        	}
        }
		error(('The element "' + elementName + '" does not have this attribute: "' + attribute.name + '"'), attribute,
				MyDblPackage.Literals.ATTRIBUTE__NAME, INVALID_ATTRIBUTE_NAME)
	}
	
	//如果该singleConditionUnit存在错误，提示错误
	def void judgeSingleCondition(SingleConditionUnit unit, List<Attribute> attributeList, String elementName){
		
		unit.attributeLeft.judgeAttributeName(attributeList, elementName);
		
		if(unit.attributeRight !== null){
			unit.attributeRight.judgeAttributeName(attributeList, elementName);
		}
	}
	
	
	//Joint element: find the teacher with student, in which 
	def void checkAlwaysHaveCorrectTarget(JointElement statement, EList<Instructions> statements) {
		
		var List<List<Attribute>> elementList = new ArrayList<List<Attribute>>();
		for(var int i = 0; i < statement.elements.size(); i++){
			var List<Attribute> attributeList = new ArrayList<Attribute>();
			elementList.add(attributeList);
		}
        
        //找出所有element为element 1, 2, 3...的CreateAttributeInstruction
        for(var int j = 0; j < statements.size(); j++){
        	if(statements.get(j) instanceof CreateAttributeInstruction){
        		var CreateAttributeInstruction createAttributeInstruction = statements.get(j) as CreateAttributeInstruction;
        		var String elementName = createAttributeInstruction.getElementName();
        		for(var int k = 0; k < elementList.size(); k++){
        			//当前找到这条createAttributeInstruction的name等于elementList(k)即JointElement的第k个element的name
        			if(elementName.equals(statement.elements.get(k).name)){
        			    elementList.get(k).add(createAttributeInstruction.attribute);
        		    }
        		}
        	}
        }
        
        for(var int i = 0; i < statement.conditions.conditions.size(); i++){
        	//对于每个element left，取出其element与attribute，找到对应的elementList，调用
        	var String elementName = statement.conditions.conditions.get(i).elementLeft.element.name;
        	var Attribute attribute = statement.conditions.conditions.get(i).elementLeft.attribute;
        	for(var int j = 0; j < elementList.size(); j++){
        		if(elementName.equals(statement.elements.get(j).name)){
        			attribute.judgeAttributeName(elementList.get(j), statement.elements.get(j).name);
        		}
        	}
        	
        	if(statement.conditions.conditions.get(i).elementRight !== null){
        		elementName = statement.conditions.conditions.get(i).elementRight.element.name;
        	    attribute = statement.conditions.conditions.get(i).elementRight.attribute;
        	    for(var int j = 0; j < elementList.size(); j++){
        	    	if(elementName.equals(statement.elements.get(j).name)){
        			    attribute.judgeAttributeName(elementList.get(j), statement.elements.get(j).name);
        		    }
        	    }
            }
        }
    }
    
    
    def void checkCorrectAttribute(AddInstruction statement, EList<Instructions> statements) {
        
        for(var int i = 0; i < statements.size(); i++){
        	if(statements.get(i) instanceof CreateTableInstruction){
        		var CreateTableInstruction createTableInstruction = statements.get(i) as CreateTableInstruction;
        		var String elementName = createTableInstruction.element.element.name;
        		if(elementName.equals(statement.element.name)){
        			return;
        		}
        	}
        }
        
        error(('The element "' + statement.element.name + '" is not defined'), statement.element,
				MyDblPackage.Literals.ELEMENT__NAME, UNDEFINED_ELEMENT_NAME)
        
	}
    
    
    
}