/*
 * generated by Xtext 2.21.0
 */
package uk.ac.kcl.shiro.mydbl0304.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import javax.inject.Inject
import org.eclipse.xtext.naming.IQualifiedNameProvider
import uk.ac.kcl.shiro.mydbl0304.myDbl.*
import org.eclipse.emf.common.util.EList
import java.util.List
import java.util.ArrayList
import uk.ac.kcl.shiro.mydbl0304.myDbl.BasicVar

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MyDblGenerator extends AbstractGenerator {

    @Inject extension IQualifiedNameProvider
 
    override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
        for (e : resource.allContents.toIterable.filter(Database)) {
            fsa.generateFile(
                e.fullyQualifiedName + ".dbl",
                e.compile)
        }
    }
    
    
    
    
    
    
    
    
    
    
    
    
    

	
	
	dispatch def String generateAttribute(Instructions stmt, String name) ''' generateAttribute: '''
    //查找与名称相符的attribute
	dispatch def String generateAttribute(CreateAttributeInstruction stmt, String name) '''«IF stmt.element.name.equals(name)»«stmt.attribute.name» «stmt.attributeType»«ENDIF»'''
	
//	循环查找所有element对应的attribute
	def String getRelatedAttribute(Database d, String name) '''
«««	«d.eAllContents.filter(CreateTableInstruction)»
	«val list = new ArrayList<Instructions>»
	«FOR f : d.instructions»  
	    «IF f instanceof CreateAttributeInstruction»
	        «IF f.element.name.equals(name)»
	            «IF list.add(f)»
	            «ENDIF»
	        «ENDIF»
	    «ENDIF»
	«ENDFOR»
	«IF list.size > 0»
	    «list.get(0).generateAttribute(name)»«IF list.size > 1»«FOR idx: (1..list.size-1)»,
	    «list.get(idx).generateAttribute(name)»«ENDFOR»«ENDIF»
	«ENDIF»
	'''
	
    dispatch def String generateTable(Instructions stmt, Database d) ''''''

    //create table
	dispatch def String generateTable(CreateTableInstruction stmt, Database d) '''
	    CREATE TABLE «stmt.table.name»(
	      «getRelatedAttribute(d, stmt.element.element.name)»
	    );
	    
	'''
	
	dispatch def String generateSqlStatement(Instructions stmt, Database d) ''''''
    
    //insert into table
	dispatch def String generateSqlStatement( AddInstruction stmt, Database d) '''
	    INSERT INTO «getTableNameByElement(stmt.element.name, d)» («stmt.insertInstruction.getInsertAttributes()»)
	    VALUES («stmt.insertInstruction.getInsertValues(d, stmt.element.name)»);
	    
	'''
	
	//根据别名获取表名 teachers
	dispatch def String getTableNameByElement(String elementName, Database d) '''«FOR f : d.instructions»«IF f instanceof CreateTableInstruction»«IF f.element.element.name.equals(elementName)»«f.table.name»«ENDIF»«ENDIF»«ENDFOR»'''

	//根据insert获取列名 age, name
	dispatch def String getInsertAttributes(InsertInstruction stmt) '''«val list = new ArrayList<SetAttributeInstruction>»«FOR f : stmt.setAttributeInstructions»«IF list.add(f)»«ENDIF»«ENDFOR»«IF list.size > 0»«list.get(0).attribute.name»«IF list.size > 1»«FOR idx: (1..list.size-1)», «list.get(idx).attribute.name»«ENDFOR»«ENDIF»«ENDIF»'''
	
	//根据insert获取值 40, Jack
	dispatch def String getInsertValues(InsertInstruction stmt, Database d, String elementName) '''«val list = new ArrayList<SetAttributeInstruction>»«FOR f : stmt.setAttributeInstructions»«IF list.add(f)»«ENDIF»«ENDFOR»«IF list.size > 0»«list.get(0).generateBasicValue(d, elementName)»«IF list.size > 1»«FOR idx: (1..list.size-1)», «list.get(idx).generateBasicValue(d, elementName)»«ENDFOR»«ENDIF»«ENDIF»'''
	
//	查建表语句找该列对应类型，如果是int以外的类型在前后补上单引号
	def String generateBasicValue(SetAttributeInstruction stmt, Database d, String elementName)'''«FOR f : d.instructions»«IF f instanceof CreateAttributeInstruction»«IF f.element.name.equals(elementName)»«IF f.attribute.name.equals(stmt.attribute.name)»«IF f.attributeType.equals("Integer")»«stmt.attributeValue.integer»«ENDIF»«IF !f.attributeType.equals("Integer")»'«stmt.attributeValue.string»'«ENDIF»«ENDIF»«ENDIF»«ENDIF»«ENDFOR»'''
    
    
    
    
    
    
    //select from table
	dispatch def String generateSqlStatement( FindInstruction stmt, Database d) '''
	    SELECT «stmt.generateSelectTarget(d)» FROM «stmt.generateTableNameByElement(d)»«stmt.generateSelectCondition(d)»;
	    
	'''
	
	//父类接口
	dispatch def String generateSelectTarget(FindInstruction stmt, Database d) ''''''
	
	//single
	dispatch def String generateSelectTarget(SingleElement stmt, Database d) '''«IF stmt.targets !== null»«stmt.targets.generateSelectTargets()»«ENDIF»«IF stmt.targets === null»*«ENDIF»'''
    
    dispatch def String generateSelectTargets(Target stmt) '''«val list = new ArrayList<Attribute>»«FOR f : stmt.attributes»«IF list.add(f)»«ENDIF»«ENDFOR»«list.get(0).name»«IF list.size > 1»«FOR idx: (1..list.size-1)», «list.get(idx).name»«ENDFOR»«ENDIF»'''
    
    //multiple
	dispatch def String generateSelectTarget(JointElement stmt, Database d) '''*'''
  
    
//    «val list = new ArrayList<SetAttributeInstruction>»
//    «FOR f : stmt.setAttributeInstructions»
//        «IF list.add(f)»
//        «ENDIF»
//    «ENDFOR»
//    «IF list.size > 0»
//        «list.get(0).generateBasicValue(d, elementName)»
//        «IF list.size > 1»
//            «FOR idx: (1..list.size-1)», 
//                «list.get(idx).generateBasicValue(d, elementName)»
//            «ENDFOR»
//        «ENDIF»
//    «ENDIF»
	
  
	
	//父类接口
	dispatch def String generateTableNameByElement(FindInstruction stmt, Database d) ''''''

	dispatch def String generateTableNameByElement(SingleElement stmt, Database d) '''«getTableNameByElement(stmt.element.name,d)»'''

	dispatch def String generateTableNameByElement(JointElement stmt, Database d) '''«val list = new ArrayList<Element>»«FOR f : stmt.elements»«IF list.add(f)»«ENDIF»«ENDFOR»«getTableNameByElement(list.get(0).name,d)» «list.get(0).name», «getTableNameByElement(list.get(1).name,d)» «list.get(1).name»«IF list.size > 2»«FOR idx: (2..list.size-1)», «getTableNameByElement(list.get(idx).name,d)» «list.get(idx).name»«ENDFOR»«ENDIF»'''
	
	
	dispatch def String generateSelectCondition(FindInstruction stmt, Database d) ''''''
	
	//single
	dispatch def String generateSelectCondition(SingleElement stmt, Database d) '''
	«IF stmt.conditions !== null» 
            
        WHERE «stmt.conditions.generateSelectConditions()»«ENDIF»'''

	
	dispatch def String generateSelectConditions(SingleCondition stmt) '''«val list = new ArrayList<SingleConditionUnit>»«FOR f : stmt.conditions»«IF list.add(f)»«ENDIF»«ENDFOR»«list.get(0).attributeLeft.name» «list.get(0).judgement.generateJudgement()» «list.get(0).generateRight()»«IF list.size > 1»«FOR idx: (1..list.size-1)» AND «list.get(idx).attributeLeft.name» «list.get(idx).judgement.generateJudgement()» «list.get(idx).generateRight()»«ENDFOR»«ENDIF»'''
    
    def String generateJudgement(String stmt) '''«IF stmt.equals("is") || stmt.equals("as") || stmt.equals("equals")»=«ENDIF»«IF stmt.equals("is not") || stmt.equals("not equals")»<>«ENDIF»«IF stmt.equals("is larger than")»>«ENDIF»«IF stmt.equals("is less than")»<«ENDIF»«IF stmt.equals("no larger than")»<=«ENDIF»«IF stmt.equals("no less than")»>=«ENDIF»'''
  
    
    def String generateRight(SingleConditionUnit stmt) '''«IF stmt.attributeRight !== null»«stmt.attributeRight.name»«ENDIF»«IF stmt.value !== null»«IF stmt.value.string !== null»'«stmt.value.string»'«ENDIF»«IF stmt.value.string === null»«stmt.value.integer»«ENDIF»«ENDIF»'''
    
	//multiple
	dispatch def String generateSelectCondition(JointElement stmt, Database d) '''
	«IF stmt.conditions !== null» 
	            
	    WHERE «stmt.conditions.generateSelectConditions()»«ENDIF»'''
	
	dispatch def String generateSelectConditions(JointCondition stmt) '''«val list = new ArrayList<JointConditionUnit>»«FOR f : stmt.conditions»«IF list.add(f)»«ENDIF»«ENDFOR»«list.get(0).elementLeft.element.name».«list.get(0).elementLeft.attribute.name» «list.get(0).judgement.generateJudgement()» «list.get(0).generateRight()»«IF list.size > 1»«FOR idx: (1..list.size-1)» AND «list.get(idx).elementLeft.element.name».«list.get(idx).elementLeft.attribute.name» «list.get(idx).judgement.generateJudgement()» «list.get(idx).generateRight()»«ENDFOR»«ENDIF»'''
    
	def String generateRight(JointConditionUnit stmt) '''«IF stmt.elementRight !== null»«stmt.elementRight.element.name».«stmt.elementRight.attribute.name»«ENDIF»«IF stmt.value !== null»«IF stmt.value.string !== null»'«stmt.value.string»'«ENDIF»«IF stmt.value.string === null»«stmt.value.integer»«ENDIF»«ENDIF»'''
    
	
	//delete from table
	dispatch def String generateSqlStatement( DeleteInstruction stmt, Database d) '''
	    DELETE FROM «getTableNameByElement(stmt.element.name,d)»«stmt.generateDeleteCondition(d)»;
	    
	'''
	
	dispatch def String generateDeleteCondition(DeleteInstruction stmt, Database d) '''
	«IF stmt.conditions !== null» 
            
        WHERE «stmt.conditions.generateSelectConditions()»«ENDIF»'''
	
	
	
    
//  调用compile开始执行  
    def compile(Database d) ''' 
        CREATE DATABASE «d.name»;
«««        «d.eAllContents.filter(CreateTableInstruction)»

«««     对于所有instruction，执行create table
        «FOR f : d.instructions»       
            «f.generateTable(d)»
        «ENDFOR»
        
«««     对于所有instruction，执行create table以外的操作
        «FOR f : d.instructions»       
            «f.generateSqlStatement(d)»
        «ENDFOR»
        
        
        
        
«««        «FOR f : d.addInstructions»
«««        INSERT INTO 
«««        «f.element.name»(
«««        «FOR a:f.insertInstruction.setAttributeInstruction»
«««        «IF f.insertInstruction.setAttributeInstruction.indexOf(a)!=f.insertInstruction.setAttributeInstruction.size-1»
«««        «a.attribute.name», 
«««        «ENDIF»
«««        «ENDFOR»
«««        «f.insertInstruction.setAttributeInstruction.get(f.insertInstruction.setAttributeInstruction.size-1).attribute.name») 
«««        VALUES («FOR a:f.insertInstruction.setAttributeInstruction»«IF f.insertInstruction.setAttributeInstruction.indexOf(a)<f.insertInstruction.setAttributeInstruction.size-1»«IF a.attributeValue.int_var.toString!==null && a.attributeValue.string_var===null »'«a.attributeValue.int_var.toString»'«ENDIF»«IF a.attributeValue.string_var !==null»'«a.attributeValue.string_var.toString»'«ENDIF», «ENDIF»«ENDFOR»«IF f.insertInstruction.setAttributeInstruction.get(f.insertInstruction.setAttributeInstruction.size-1).attributeValue.int_var.toString!==null»'«f.insertInstruction.setAttributeInstruction.get(f.insertInstruction.setAttributeInstruction.size-1).attributeValue.int_var.toString»'«ENDIF»«IF f.insertInstruction.setAttributeInstruction.get(f.insertInstruction.setAttributeInstruction.size-1).attributeValue.int_var.toString ===null»'«f.insertInstruction.setAttributeInstruction.get(f.insertInstruction.setAttributeInstruction.size-1).attributeValue.string_var.toString.toString»'«ENDIF»);
«««        «ENDFOR»

«««                
«««       «FOR f : d.addInstructions»       
«««       INSERT INTO «f.element.name»(«FOR a:f.insertInstruction.setAttributeInstruction» «a.attribute.name»,«ENDFOR»)VALUES («FOR a:f.insertInstruction.setAttributeInstruction» «a.attributeValue»,«ENDFOR»);     
«««       «ENDFOR»
«««       
«««       «FOR f : d.findInstructions»      
«««                    «IF f.target1 !== null»                                                        
«««                    SELECT * FROM «f.target1.element.name» WHERE «FOR cond:f.target1.condition.conditions»«cond.attributeLeft.name»«cond.judgement.toString»«ENDFOR»;
«««                    «ENDIF»         
«««                    «IF f.target2 !== null»
«««                    SELECT * FROM «f.target2.elements»WHERE «f.target2.conditions»;
«««                    «ENDIF»          
«««              «ENDFOR»
«««              
       
    '''
    


  
    
//      def compile(CreateElementInstruction s) ''' 
//  
//        
//        create table «t.name» 
//            «FOR f : s.attributes»
//                «f.compile»
//            «ENDFOR»
//        
//    '''
         
//          def compile(AddInstruction s) ''' 
//  
//        
//      INSERT INTO «s.element» 
//      		«FOR f : s.insertInstruction.setAttributeInstruction»
//      		(«f.attribute» )VALUES ( «f.attributeValue»
//      		«ENDFOR»);
//        
//   '''
////          def compile(FindInstruction s, Table t) ''' 
////       		«IF s.target == SingleElement»
////       		SELECT * FROM «s.target.element» WHERE «s.target.condition.»
////       	
////   
////    '''
 
}