/*
 * generated by Xtext 2.21.0
 */
package uk.ac.kcl.shiro.mydbl0304.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import uk.ac.kcl.shiro.mydbl0304.myDbl.AddInstruction;
import uk.ac.kcl.shiro.mydbl0304.myDbl.Attribute;
import uk.ac.kcl.shiro.mydbl0304.myDbl.AttributeOfElement;
import uk.ac.kcl.shiro.mydbl0304.myDbl.BasicVar;
import uk.ac.kcl.shiro.mydbl0304.myDbl.CreateAttributeInstruction;
import uk.ac.kcl.shiro.mydbl0304.myDbl.CreateElementInstruction;
import uk.ac.kcl.shiro.mydbl0304.myDbl.CreateTableInstruction;
import uk.ac.kcl.shiro.mydbl0304.myDbl.Database;
import uk.ac.kcl.shiro.mydbl0304.myDbl.DeleteInstruction;
import uk.ac.kcl.shiro.mydbl0304.myDbl.Element;
import uk.ac.kcl.shiro.mydbl0304.myDbl.InsertInstruction;
import uk.ac.kcl.shiro.mydbl0304.myDbl.JointCondition;
import uk.ac.kcl.shiro.mydbl0304.myDbl.JointConditionUnit;
import uk.ac.kcl.shiro.mydbl0304.myDbl.JointElement;
import uk.ac.kcl.shiro.mydbl0304.myDbl.MyDblPackage;
import uk.ac.kcl.shiro.mydbl0304.myDbl.SetAttributeInstruction;
import uk.ac.kcl.shiro.mydbl0304.myDbl.SingleCondition;
import uk.ac.kcl.shiro.mydbl0304.myDbl.SingleConditionUnit;
import uk.ac.kcl.shiro.mydbl0304.myDbl.SingleElement;
import uk.ac.kcl.shiro.mydbl0304.myDbl.Table;
import uk.ac.kcl.shiro.mydbl0304.myDbl.Target;
import uk.ac.kcl.shiro.mydbl0304.services.MyDblGrammarAccess;

@SuppressWarnings("all")
public class MyDblSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MyDblGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MyDblPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MyDblPackage.ADD_INSTRUCTION:
				sequence_AddInstruction(context, (AddInstruction) semanticObject); 
				return; 
			case MyDblPackage.ATTRIBUTE:
				sequence_Attribute(context, (Attribute) semanticObject); 
				return; 
			case MyDblPackage.ATTRIBUTE_OF_ELEMENT:
				sequence_AttributeOfElement(context, (AttributeOfElement) semanticObject); 
				return; 
			case MyDblPackage.BASIC_VAR:
				sequence_BasicVar(context, (BasicVar) semanticObject); 
				return; 
			case MyDblPackage.CREATE_ATTRIBUTE_INSTRUCTION:
				sequence_CreateAttributeInstruction(context, (CreateAttributeInstruction) semanticObject); 
				return; 
			case MyDblPackage.CREATE_ELEMENT_INSTRUCTION:
				sequence_CreateElementInstruction(context, (CreateElementInstruction) semanticObject); 
				return; 
			case MyDblPackage.CREATE_TABLE_INSTRUCTION:
				sequence_CreateTableInstruction(context, (CreateTableInstruction) semanticObject); 
				return; 
			case MyDblPackage.DATABASE:
				sequence_Database(context, (Database) semanticObject); 
				return; 
			case MyDblPackage.DELETE_INSTRUCTION:
				sequence_DeleteInstruction(context, (DeleteInstruction) semanticObject); 
				return; 
			case MyDblPackage.ELEMENT:
				sequence_Element(context, (Element) semanticObject); 
				return; 
			case MyDblPackage.INSERT_INSTRUCTION:
				sequence_InsertInstruction(context, (InsertInstruction) semanticObject); 
				return; 
			case MyDblPackage.JOINT_CONDITION:
				sequence_JointCondition(context, (JointCondition) semanticObject); 
				return; 
			case MyDblPackage.JOINT_CONDITION_UNIT:
				sequence_JointConditionUnit(context, (JointConditionUnit) semanticObject); 
				return; 
			case MyDblPackage.JOINT_ELEMENT:
				sequence_JointElement(context, (JointElement) semanticObject); 
				return; 
			case MyDblPackage.SET_ATTRIBUTE_INSTRUCTION:
				sequence_SetAttributeInstruction(context, (SetAttributeInstruction) semanticObject); 
				return; 
			case MyDblPackage.SINGLE_CONDITION:
				sequence_SingleCondition(context, (SingleCondition) semanticObject); 
				return; 
			case MyDblPackage.SINGLE_CONDITION_UNIT:
				sequence_SingleConditionUnit(context, (SingleConditionUnit) semanticObject); 
				return; 
			case MyDblPackage.SINGLE_ELEMENT:
				sequence_SingleElement(context, (SingleElement) semanticObject); 
				return; 
			case MyDblPackage.TABLE:
				sequence_Table(context, (Table) semanticObject); 
				return; 
			case MyDblPackage.TARGET:
				sequence_Target(context, (Target) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Instructions returns AddInstruction
	 *     AddInstruction returns AddInstruction
	 *
	 * Constraint:
	 *     (element=Element insertInstruction=InsertInstruction)
	 */
	protected void sequence_AddInstruction(ISerializationContext context, AddInstruction semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDblPackage.Literals.ADD_INSTRUCTION__ELEMENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDblPackage.Literals.ADD_INSTRUCTION__ELEMENT));
			if (transientValues.isValueTransient(semanticObject, MyDblPackage.Literals.ADD_INSTRUCTION__INSERT_INSTRUCTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDblPackage.Literals.ADD_INSTRUCTION__INSERT_INSTRUCTION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAddInstructionAccess().getElementElementParserRuleCall_2_0(), semanticObject.getElement());
		feeder.accept(grammarAccess.getAddInstructionAccess().getInsertInstructionInsertInstructionParserRuleCall_4_0(), semanticObject.getInsertInstruction());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AttributeOfElement returns AttributeOfElement
	 *
	 * Constraint:
	 *     (element=Element attribute=Attribute)
	 */
	protected void sequence_AttributeOfElement(ISerializationContext context, AttributeOfElement semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDblPackage.Literals.ATTRIBUTE_OF_ELEMENT__ELEMENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDblPackage.Literals.ATTRIBUTE_OF_ELEMENT__ELEMENT));
			if (transientValues.isValueTransient(semanticObject, MyDblPackage.Literals.ATTRIBUTE_OF_ELEMENT__ATTRIBUTE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDblPackage.Literals.ATTRIBUTE_OF_ELEMENT__ATTRIBUTE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAttributeOfElementAccess().getElementElementParserRuleCall_0_0(), semanticObject.getElement());
		feeder.accept(grammarAccess.getAttributeOfElementAccess().getAttributeAttributeParserRuleCall_2_0(), semanticObject.getAttribute());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Attribute returns Attribute
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Attribute(ISerializationContext context, Attribute semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDblPackage.Literals.ATTRIBUTE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDblPackage.Literals.ATTRIBUTE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAttributeAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     BasicVar returns BasicVar
	 *
	 * Constraint:
	 *     (integer=INT | string=STRING)
	 */
	protected void sequence_BasicVar(ISerializationContext context, BasicVar semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Instructions returns CreateAttributeInstruction
	 *     CreateAttributeInstruction returns CreateAttributeInstruction
	 *
	 * Constraint:
	 *     (element=Element attribute=Attribute attributeType=AttributeType)
	 */
	protected void sequence_CreateAttributeInstruction(ISerializationContext context, CreateAttributeInstruction semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDblPackage.Literals.CREATE_ATTRIBUTE_INSTRUCTION__ELEMENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDblPackage.Literals.CREATE_ATTRIBUTE_INSTRUCTION__ELEMENT));
			if (transientValues.isValueTransient(semanticObject, MyDblPackage.Literals.CREATE_ATTRIBUTE_INSTRUCTION__ATTRIBUTE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDblPackage.Literals.CREATE_ATTRIBUTE_INSTRUCTION__ATTRIBUTE));
			if (transientValues.isValueTransient(semanticObject, MyDblPackage.Literals.CREATE_ATTRIBUTE_INSTRUCTION__ATTRIBUTE_TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDblPackage.Literals.CREATE_ATTRIBUTE_INSTRUCTION__ATTRIBUTE_TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCreateAttributeInstructionAccess().getElementElementParserRuleCall_0_0(), semanticObject.getElement());
		feeder.accept(grammarAccess.getCreateAttributeInstructionAccess().getAttributeAttributeParserRuleCall_4_0(), semanticObject.getAttribute());
		feeder.accept(grammarAccess.getCreateAttributeInstructionAccess().getAttributeTypeAttributeTypeParserRuleCall_8_0(), semanticObject.getAttributeType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Instructions returns CreateElementInstruction
	 *     CreateElementInstruction returns CreateElementInstruction
	 *
	 * Constraint:
	 *     element=Element
	 */
	protected void sequence_CreateElementInstruction(ISerializationContext context, CreateElementInstruction semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDblPackage.Literals.CREATE_ELEMENT_INSTRUCTION__ELEMENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDblPackage.Literals.CREATE_ELEMENT_INSTRUCTION__ELEMENT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCreateElementInstructionAccess().getElementElementParserRuleCall_5_0(), semanticObject.getElement());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Instructions returns CreateTableInstruction
	 *     CreateTableInstruction returns CreateTableInstruction
	 *
	 * Constraint:
	 *     (table=Table element=CreateElementInstruction)
	 */
	protected void sequence_CreateTableInstruction(ISerializationContext context, CreateTableInstruction semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDblPackage.Literals.CREATE_TABLE_INSTRUCTION__TABLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDblPackage.Literals.CREATE_TABLE_INSTRUCTION__TABLE));
			if (transientValues.isValueTransient(semanticObject, MyDblPackage.Literals.CREATE_TABLE_INSTRUCTION__ELEMENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDblPackage.Literals.CREATE_TABLE_INSTRUCTION__ELEMENT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCreateTableInstructionAccess().getTableTableParserRuleCall_4_0(), semanticObject.getTable());
		feeder.accept(grammarAccess.getCreateTableInstructionAccess().getElementCreateElementInstructionParserRuleCall_5_0(), semanticObject.getElement());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Database returns Database
	 *
	 * Constraint:
	 *     (name=ID instructions+=Instructions*)
	 */
	protected void sequence_Database(ISerializationContext context, Database semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Instructions returns DeleteInstruction
	 *     DeleteInstruction returns DeleteInstruction
	 *
	 * Constraint:
	 *     (element=Element conditions=SingleCondition)
	 */
	protected void sequence_DeleteInstruction(ISerializationContext context, DeleteInstruction semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDblPackage.Literals.DELETE_INSTRUCTION__ELEMENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDblPackage.Literals.DELETE_INSTRUCTION__ELEMENT));
			if (transientValues.isValueTransient(semanticObject, MyDblPackage.Literals.DELETE_INSTRUCTION__CONDITIONS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDblPackage.Literals.DELETE_INSTRUCTION__CONDITIONS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDeleteInstructionAccess().getElementElementParserRuleCall_2_0(), semanticObject.getElement());
		feeder.accept(grammarAccess.getDeleteInstructionAccess().getConditionsSingleConditionParserRuleCall_5_0(), semanticObject.getConditions());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Element returns Element
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Element(ISerializationContext context, Element semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDblPackage.Literals.ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDblPackage.Literals.ELEMENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getElementAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     InsertInstruction returns InsertInstruction
	 *
	 * Constraint:
	 *     (setAttributeInstructions+=SetAttributeInstruction setAttributeInstructions+=SetAttributeInstruction*)
	 */
	protected void sequence_InsertInstruction(ISerializationContext context, InsertInstruction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     JointConditionUnit returns JointConditionUnit
	 *
	 * Constraint:
	 *     (elementLeft=AttributeOfElement judgement=Judgement (elementRight=AttributeOfElement | value=BasicVar))
	 */
	protected void sequence_JointConditionUnit(ISerializationContext context, JointConditionUnit semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     JointCondition returns JointCondition
	 *
	 * Constraint:
	 *     (conditions+=JointConditionUnit conditions+=JointConditionUnit*)
	 */
	protected void sequence_JointCondition(ISerializationContext context, JointCondition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Instructions returns JointElement
	 *     FindInstruction returns JointElement
	 *     JointElement returns JointElement
	 *
	 * Constraint:
	 *     (elements+=Element elements+=Element+ conditions=JointCondition)
	 */
	protected void sequence_JointElement(ISerializationContext context, JointElement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SetAttributeInstruction returns SetAttributeInstruction
	 *
	 * Constraint:
	 *     (attribute=Attribute attributeValue=BasicVar)
	 */
	protected void sequence_SetAttributeInstruction(ISerializationContext context, SetAttributeInstruction semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDblPackage.Literals.SET_ATTRIBUTE_INSTRUCTION__ATTRIBUTE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDblPackage.Literals.SET_ATTRIBUTE_INSTRUCTION__ATTRIBUTE));
			if (transientValues.isValueTransient(semanticObject, MyDblPackage.Literals.SET_ATTRIBUTE_INSTRUCTION__ATTRIBUTE_VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDblPackage.Literals.SET_ATTRIBUTE_INSTRUCTION__ATTRIBUTE_VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSetAttributeInstructionAccess().getAttributeAttributeParserRuleCall_0_0(), semanticObject.getAttribute());
		feeder.accept(grammarAccess.getSetAttributeInstructionAccess().getAttributeValueBasicVarParserRuleCall_2_0(), semanticObject.getAttributeValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SingleConditionUnit returns SingleConditionUnit
	 *
	 * Constraint:
	 *     (attributeLeft=Attribute judgement=Judgement (attributeRight=Attribute | value=BasicVar))
	 */
	protected void sequence_SingleConditionUnit(ISerializationContext context, SingleConditionUnit semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SingleCondition returns SingleCondition
	 *
	 * Constraint:
	 *     (conditions+=SingleConditionUnit conditions+=SingleConditionUnit*)
	 */
	protected void sequence_SingleCondition(ISerializationContext context, SingleCondition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Instructions returns SingleElement
	 *     FindInstruction returns SingleElement
	 *     SingleElement returns SingleElement
	 *
	 * Constraint:
	 *     (targets=Target? element=Element conditions=SingleCondition?)
	 */
	protected void sequence_SingleElement(ISerializationContext context, SingleElement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Table returns Table
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Table(ISerializationContext context, Table semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDblPackage.Literals.TABLE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDblPackage.Literals.TABLE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTableAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Target returns Target
	 *
	 * Constraint:
	 *     (attributes+=Attribute attributes+=Attribute*)
	 */
	protected void sequence_Target(ISerializationContext context, Target semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
