/*
 * generated by Xtext 2.21.0
 */
package uk.ac.kcl.shiro.mydbl0304.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDblGrammarAccess extends AbstractGrammarElementFinder {
	
	public class DatabaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.shiro.mydbl0304.MyDbl.Database");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCreateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cDatabaseKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cNamedKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Assignment cInstructionsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cInstructionsInstructionsParserRuleCall_4_0 = (RuleCall)cInstructionsAssignment_4.eContents().get(0);
		
		//Database:
		//	'create' 'database' 'named' name=ID
		//	instructions+=Instructions*;
		@Override public ParserRule getRule() { return rule; }
		
		//'create' 'database' 'named' name=ID instructions+=Instructions*
		public Group getGroup() { return cGroup; }
		
		//'create'
		public Keyword getCreateKeyword_0() { return cCreateKeyword_0; }
		
		//'database'
		public Keyword getDatabaseKeyword_1() { return cDatabaseKeyword_1; }
		
		//'named'
		public Keyword getNamedKeyword_2() { return cNamedKeyword_2; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//instructions+=Instructions*
		public Assignment getInstructionsAssignment_4() { return cInstructionsAssignment_4; }
		
		//Instructions
		public RuleCall getInstructionsInstructionsParserRuleCall_4_0() { return cInstructionsInstructionsParserRuleCall_4_0; }
	}
	public class InstructionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.shiro.mydbl0304.MyDbl.Instructions");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCreateTableInstructionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCreateElementInstructionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCreateAttributeInstructionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cAddInstructionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cFindInstructionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cDeleteInstructionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//Instructions:
		//	CreateTableInstruction | CreateElementInstruction | CreateAttributeInstruction | AddInstruction | FindInstruction |
		//	DeleteInstruction;
		@Override public ParserRule getRule() { return rule; }
		
		//CreateTableInstruction | CreateElementInstruction | CreateAttributeInstruction | AddInstruction | FindInstruction |
		//DeleteInstruction
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//CreateTableInstruction
		public RuleCall getCreateTableInstructionParserRuleCall_0() { return cCreateTableInstructionParserRuleCall_0; }
		
		//CreateElementInstruction
		public RuleCall getCreateElementInstructionParserRuleCall_1() { return cCreateElementInstructionParserRuleCall_1; }
		
		//CreateAttributeInstruction
		public RuleCall getCreateAttributeInstructionParserRuleCall_2() { return cCreateAttributeInstructionParserRuleCall_2; }
		
		//AddInstruction
		public RuleCall getAddInstructionParserRuleCall_3() { return cAddInstructionParserRuleCall_3; }
		
		//FindInstruction
		public RuleCall getFindInstructionParserRuleCall_4() { return cFindInstructionParserRuleCall_4; }
		
		//DeleteInstruction
		public RuleCall getDeleteInstructionParserRuleCall_5() { return cDeleteInstructionParserRuleCall_5; }
	}
	public class CreateTableInstructionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.shiro.mydbl0304.MyDbl.CreateTableInstruction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCreateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cAKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cTableKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cNamedKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTableAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTableTableParserRuleCall_4_0 = (RuleCall)cTableAssignment_4.eContents().get(0);
		private final Assignment cElementAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cElementCreateElementInstructionParserRuleCall_5_0 = (RuleCall)cElementAssignment_5.eContents().get(0);
		
		//CreateTableInstruction:
		//	'create' 'a' 'table' 'named' table=Table element=CreateElementInstruction;
		@Override public ParserRule getRule() { return rule; }
		
		//'create' 'a' 'table' 'named' table=Table element=CreateElementInstruction
		public Group getGroup() { return cGroup; }
		
		//'create'
		public Keyword getCreateKeyword_0() { return cCreateKeyword_0; }
		
		//'a'
		public Keyword getAKeyword_1() { return cAKeyword_1; }
		
		//'table'
		public Keyword getTableKeyword_2() { return cTableKeyword_2; }
		
		//'named'
		public Keyword getNamedKeyword_3() { return cNamedKeyword_3; }
		
		//table=Table
		public Assignment getTableAssignment_4() { return cTableAssignment_4; }
		
		//Table
		public RuleCall getTableTableParserRuleCall_4_0() { return cTableTableParserRuleCall_4_0; }
		
		//element=CreateElementInstruction
		public Assignment getElementAssignment_5() { return cElementAssignment_5; }
		
		//CreateElementInstruction
		public RuleCall getElementCreateElementInstructionParserRuleCall_5_0() { return cElementCreateElementInstructionParserRuleCall_5_0; }
	}
	public class TableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.shiro.mydbl0304.MyDbl.Table");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Table:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class CreateElementInstructionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.shiro.mydbl0304.MyDbl.CreateElementInstruction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cWhichKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cSavesKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cDataKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cOfKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cElementAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cElementElementParserRuleCall_5_0 = (RuleCall)cElementAssignment_5.eContents().get(0);
		
		//CreateElementInstruction:
		//	',' 'which' 'saves' 'data' 'of' element=Element;
		@Override public ParserRule getRule() { return rule; }
		
		//',' 'which' 'saves' 'data' 'of' element=Element
		public Group getGroup() { return cGroup; }
		
		//','
		public Keyword getCommaKeyword_0() { return cCommaKeyword_0; }
		
		//'which'
		public Keyword getWhichKeyword_1() { return cWhichKeyword_1; }
		
		//'saves'
		public Keyword getSavesKeyword_2() { return cSavesKeyword_2; }
		
		//'data'
		public Keyword getDataKeyword_3() { return cDataKeyword_3; }
		
		//'of'
		public Keyword getOfKeyword_4() { return cOfKeyword_4; }
		
		//element=Element
		public Assignment getElementAssignment_5() { return cElementAssignment_5; }
		
		//Element
		public RuleCall getElementElementParserRuleCall_5_0() { return cElementElementParserRuleCall_5_0; }
	}
	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.shiro.mydbl0304.MyDbl.Element");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Element:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class CreateAttributeInstructionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.shiro.mydbl0304.MyDbl.CreateAttributeInstruction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cElementAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cElementElementParserRuleCall_0_0 = (RuleCall)cElementAssignment_0.eContents().get(0);
		private final Keyword cHasKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cAttributeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cNamedKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cAttributeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAttributeAttributeParserRuleCall_4_0 = (RuleCall)cAttributeAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cWhichKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cIsKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cAttributeTypeAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cAttributeTypeAttributeTypeParserRuleCall_8_0 = (RuleCall)cAttributeTypeAssignment_8.eContents().get(0);
		
		//CreateAttributeInstruction:
		//	element=Element "has" "attribute" "named" attribute=Attribute "," "which" "is" attributeType=AttributeType;
		@Override public ParserRule getRule() { return rule; }
		
		//element=Element "has" "attribute" "named" attribute=Attribute "," "which" "is" attributeType=AttributeType
		public Group getGroup() { return cGroup; }
		
		//element=Element
		public Assignment getElementAssignment_0() { return cElementAssignment_0; }
		
		//Element
		public RuleCall getElementElementParserRuleCall_0_0() { return cElementElementParserRuleCall_0_0; }
		
		//"has"
		public Keyword getHasKeyword_1() { return cHasKeyword_1; }
		
		//"attribute"
		public Keyword getAttributeKeyword_2() { return cAttributeKeyword_2; }
		
		//"named"
		public Keyword getNamedKeyword_3() { return cNamedKeyword_3; }
		
		//attribute=Attribute
		public Assignment getAttributeAssignment_4() { return cAttributeAssignment_4; }
		
		//Attribute
		public RuleCall getAttributeAttributeParserRuleCall_4_0() { return cAttributeAttributeParserRuleCall_4_0; }
		
		//","
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }
		
		//"which"
		public Keyword getWhichKeyword_6() { return cWhichKeyword_6; }
		
		//"is"
		public Keyword getIsKeyword_7() { return cIsKeyword_7; }
		
		//attributeType=AttributeType
		public Assignment getAttributeTypeAssignment_8() { return cAttributeTypeAssignment_8; }
		
		//AttributeType
		public RuleCall getAttributeTypeAttributeTypeParserRuleCall_8_0() { return cAttributeTypeAttributeTypeParserRuleCall_8_0; }
	}
	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.shiro.mydbl0304.MyDbl.Attribute");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Attribute:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class AttributeTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.shiro.mydbl0304.MyDbl.AttributeType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cBinaryKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cVarbinaryKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cImageKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cCharKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cVarcharKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cTextKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cNcharKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cNvarcharKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cNtextKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cDatetimeKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cSmalldatetimeKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cDateKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cTimeStampKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Keyword cIntegerKeyword_13 = (Keyword)cAlternatives.eContents().get(13);
		private final Keyword cDoubleKeyword_14 = (Keyword)cAlternatives.eContents().get(14);
		private final Keyword cFloatKeyword_15 = (Keyword)cAlternatives.eContents().get(15);
		
		//AttributeType:
		//	"Binary" | "Varbinary" | "Image" | "Char" |
		//	"Varchar" | "Text" | "Nchar" | "Nvarchar" |
		//	"Ntext" | "Datetime" | "Smalldatetime" | "Date" |
		//	"TimeStamp" | "Integer" | "Double" | "Float";
		@Override public ParserRule getRule() { return rule; }
		
		//"Binary" | "Varbinary" | "Image" | "Char" | "Varchar" | "Text" | "Nchar" | "Nvarchar" | "Ntext" | "Datetime" |
		//"Smalldatetime" | "Date" | "TimeStamp" | "Integer" | "Double" | "Float"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"Binary"
		public Keyword getBinaryKeyword_0() { return cBinaryKeyword_0; }
		
		//"Varbinary"
		public Keyword getVarbinaryKeyword_1() { return cVarbinaryKeyword_1; }
		
		//"Image"
		public Keyword getImageKeyword_2() { return cImageKeyword_2; }
		
		//"Char"
		public Keyword getCharKeyword_3() { return cCharKeyword_3; }
		
		//"Varchar"
		public Keyword getVarcharKeyword_4() { return cVarcharKeyword_4; }
		
		//"Text"
		public Keyword getTextKeyword_5() { return cTextKeyword_5; }
		
		//"Nchar"
		public Keyword getNcharKeyword_6() { return cNcharKeyword_6; }
		
		//"Nvarchar"
		public Keyword getNvarcharKeyword_7() { return cNvarcharKeyword_7; }
		
		//"Ntext"
		public Keyword getNtextKeyword_8() { return cNtextKeyword_8; }
		
		//"Datetime"
		public Keyword getDatetimeKeyword_9() { return cDatetimeKeyword_9; }
		
		//"Smalldatetime"
		public Keyword getSmalldatetimeKeyword_10() { return cSmalldatetimeKeyword_10; }
		
		//"Date"
		public Keyword getDateKeyword_11() { return cDateKeyword_11; }
		
		//"TimeStamp"
		public Keyword getTimeStampKeyword_12() { return cTimeStampKeyword_12; }
		
		//"Integer"
		public Keyword getIntegerKeyword_13() { return cIntegerKeyword_13; }
		
		//"Double"
		public Keyword getDoubleKeyword_14() { return cDoubleKeyword_14; }
		
		//"Float"
		public Keyword getFloatKeyword_15() { return cFloatKeyword_15; }
	}
	public class BasicVarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.shiro.mydbl0304.MyDbl.BasicVar");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cIntegerAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cIntegerINTTerminalRuleCall_0_0 = (RuleCall)cIntegerAssignment_0.eContents().get(0);
		private final Assignment cStringAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cStringSTRINGTerminalRuleCall_1_0 = (RuleCall)cStringAssignment_1.eContents().get(0);
		
		//BasicVar:
		//	integer=INT | string=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//integer=INT | string=STRING
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//integer=INT
		public Assignment getIntegerAssignment_0() { return cIntegerAssignment_0; }
		
		//INT
		public RuleCall getIntegerINTTerminalRuleCall_0_0() { return cIntegerINTTerminalRuleCall_0_0; }
		
		//string=STRING
		public Assignment getStringAssignment_1() { return cStringAssignment_1; }
		
		//STRING
		public RuleCall getStringSTRINGTerminalRuleCall_1_0() { return cStringSTRINGTerminalRuleCall_1_0; }
	}
	public class AddInstructionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.shiro.mydbl0304.MyDbl.AddInstruction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAddKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cAKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cElementAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementElementParserRuleCall_2_0 = (RuleCall)cElementAssignment_2.eContents().get(0);
		private final Keyword cWithKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cInsertInstructionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cInsertInstructionInsertInstructionParserRuleCall_4_0 = (RuleCall)cInsertInstructionAssignment_4.eContents().get(0);
		
		////add a teacher with age of 40, subject of Math
		//AddInstruction:
		//	"add" "a" element=Element "with" insertInstruction=InsertInstruction;
		@Override public ParserRule getRule() { return rule; }
		
		//"add" "a" element=Element "with" insertInstruction=InsertInstruction
		public Group getGroup() { return cGroup; }
		
		//"add"
		public Keyword getAddKeyword_0() { return cAddKeyword_0; }
		
		//"a"
		public Keyword getAKeyword_1() { return cAKeyword_1; }
		
		//element=Element
		public Assignment getElementAssignment_2() { return cElementAssignment_2; }
		
		//Element
		public RuleCall getElementElementParserRuleCall_2_0() { return cElementElementParserRuleCall_2_0; }
		
		//"with"
		public Keyword getWithKeyword_3() { return cWithKeyword_3; }
		
		//insertInstruction=InsertInstruction
		public Assignment getInsertInstructionAssignment_4() { return cInsertInstructionAssignment_4; }
		
		//InsertInstruction
		public RuleCall getInsertInstructionInsertInstructionParserRuleCall_4_0() { return cInsertInstructionInsertInstructionParserRuleCall_4_0; }
	}
	public class InsertInstructionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.shiro.mydbl0304.MyDbl.InsertInstruction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSetAttributeInstructionsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSetAttributeInstructionsSetAttributeInstructionParserRuleCall_0_0 = (RuleCall)cSetAttributeInstructionsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cSetAttributeInstructionsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSetAttributeInstructionsSetAttributeInstructionParserRuleCall_1_1_0 = (RuleCall)cSetAttributeInstructionsAssignment_1_1.eContents().get(0);
		
		////age of 40, subject of Math
		// InsertInstruction:
		//	setAttributeInstructions+=SetAttributeInstruction ("," setAttributeInstructions+=SetAttributeInstruction)*;
		@Override public ParserRule getRule() { return rule; }
		
		//setAttributeInstructions+=SetAttributeInstruction ("," setAttributeInstructions+=SetAttributeInstruction)*
		public Group getGroup() { return cGroup; }
		
		//setAttributeInstructions+=SetAttributeInstruction
		public Assignment getSetAttributeInstructionsAssignment_0() { return cSetAttributeInstructionsAssignment_0; }
		
		//SetAttributeInstruction
		public RuleCall getSetAttributeInstructionsSetAttributeInstructionParserRuleCall_0_0() { return cSetAttributeInstructionsSetAttributeInstructionParserRuleCall_0_0; }
		
		//("," setAttributeInstructions+=SetAttributeInstruction)*
		public Group getGroup_1() { return cGroup_1; }
		
		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//setAttributeInstructions+=SetAttributeInstruction
		public Assignment getSetAttributeInstructionsAssignment_1_1() { return cSetAttributeInstructionsAssignment_1_1; }
		
		//SetAttributeInstruction
		public RuleCall getSetAttributeInstructionsSetAttributeInstructionParserRuleCall_1_1_0() { return cSetAttributeInstructionsSetAttributeInstructionParserRuleCall_1_1_0; }
	}
	public class SetAttributeInstructionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.shiro.mydbl0304.MyDbl.SetAttributeInstruction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAttributeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAttributeAttributeParserRuleCall_0_0 = (RuleCall)cAttributeAssignment_0.eContents().get(0);
		private final Keyword cOfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAttributeValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAttributeValueBasicVarParserRuleCall_2_0 = (RuleCall)cAttributeValueAssignment_2.eContents().get(0);
		
		////age of 40
		//SetAttributeInstruction:
		//	attribute=Attribute "of" attributeValue=BasicVar;
		@Override public ParserRule getRule() { return rule; }
		
		//attribute=Attribute "of" attributeValue=BasicVar
		public Group getGroup() { return cGroup; }
		
		//attribute=Attribute
		public Assignment getAttributeAssignment_0() { return cAttributeAssignment_0; }
		
		//Attribute
		public RuleCall getAttributeAttributeParserRuleCall_0_0() { return cAttributeAttributeParserRuleCall_0_0; }
		
		//"of"
		public Keyword getOfKeyword_1() { return cOfKeyword_1; }
		
		//attributeValue=BasicVar
		public Assignment getAttributeValueAssignment_2() { return cAttributeValueAssignment_2; }
		
		//BasicVar
		public RuleCall getAttributeValueBasicVarParserRuleCall_2_0() { return cAttributeValueBasicVarParserRuleCall_2_0; }
	}
	public class FindInstructionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.shiro.mydbl0304.MyDbl.FindInstruction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFindKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cTheKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final RuleCall cSingleElementParserRuleCall_2_0 = (RuleCall)cAlternatives_2.eContents().get(0);
		private final RuleCall cJointElementParserRuleCall_2_1 = (RuleCall)cAlternatives_2.eContents().get(1);
		
		////find the teacher with student, in which teacher’s class equals student’s class
		////find the age of teacher whose age is larger than 35
		//FindInstruction:
		//	"find" "the" (SingleElement | JointElement);
		@Override public ParserRule getRule() { return rule; }
		
		//"find" "the" (SingleElement | JointElement)
		public Group getGroup() { return cGroup; }
		
		//"find"
		public Keyword getFindKeyword_0() { return cFindKeyword_0; }
		
		//"the"
		public Keyword getTheKeyword_1() { return cTheKeyword_1; }
		
		//(SingleElement | JointElement)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//SingleElement
		public RuleCall getSingleElementParserRuleCall_2_0() { return cSingleElementParserRuleCall_2_0; }
		
		//JointElement
		public RuleCall getJointElementParserRuleCall_2_1() { return cJointElementParserRuleCall_2_1; }
	}
	public class SingleElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.shiro.mydbl0304.MyDbl.SingleElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cTargetsAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cTargetsTargetParserRuleCall_0_0_0 = (RuleCall)cTargetsAssignment_0_0.eContents().get(0);
		private final Keyword cOfKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cElementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementElementParserRuleCall_1_0 = (RuleCall)cElementAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cWhoseKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cConditionsAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cConditionsSingleConditionParserRuleCall_2_2_0 = (RuleCall)cConditionsAssignment_2_2.eContents().get(0);
		
		////find the teacher whose | find the age of teacher whose 
		//SingleElement:
		//	(targets=Target "of")? element=Element ("," "whose" conditions=SingleCondition)?;
		@Override public ParserRule getRule() { return rule; }
		
		//(targets=Target "of")? element=Element ("," "whose" conditions=SingleCondition)?
		public Group getGroup() { return cGroup; }
		
		//(targets=Target "of")?
		public Group getGroup_0() { return cGroup_0; }
		
		//targets=Target
		public Assignment getTargetsAssignment_0_0() { return cTargetsAssignment_0_0; }
		
		//Target
		public RuleCall getTargetsTargetParserRuleCall_0_0_0() { return cTargetsTargetParserRuleCall_0_0_0; }
		
		//"of"
		public Keyword getOfKeyword_0_1() { return cOfKeyword_0_1; }
		
		//element=Element
		public Assignment getElementAssignment_1() { return cElementAssignment_1; }
		
		//Element
		public RuleCall getElementElementParserRuleCall_1_0() { return cElementElementParserRuleCall_1_0; }
		
		//("," "whose" conditions=SingleCondition)?
		public Group getGroup_2() { return cGroup_2; }
		
		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//"whose"
		public Keyword getWhoseKeyword_2_1() { return cWhoseKeyword_2_1; }
		
		//conditions=SingleCondition
		public Assignment getConditionsAssignment_2_2() { return cConditionsAssignment_2_2; }
		
		//SingleCondition
		public RuleCall getConditionsSingleConditionParserRuleCall_2_2_0() { return cConditionsSingleConditionParserRuleCall_2_2_0; }
	}
	public class TargetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.shiro.mydbl0304.MyDbl.Target");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAttributesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAttributesAttributeParserRuleCall_0_0 = (RuleCall)cAttributesAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAttributesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAttributesAttributeParserRuleCall_1_1_0 = (RuleCall)cAttributesAssignment_1_1.eContents().get(0);
		
		//Target:
		//	attributes+=Attribute ("," attributes+=Attribute)*;
		@Override public ParserRule getRule() { return rule; }
		
		//attributes+=Attribute ("," attributes+=Attribute)*
		public Group getGroup() { return cGroup; }
		
		//attributes+=Attribute
		public Assignment getAttributesAssignment_0() { return cAttributesAssignment_0; }
		
		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_0_0() { return cAttributesAttributeParserRuleCall_0_0; }
		
		//("," attributes+=Attribute)*
		public Group getGroup_1() { return cGroup_1; }
		
		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//attributes+=Attribute
		public Assignment getAttributesAssignment_1_1() { return cAttributesAssignment_1_1; }
		
		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_1_1_0() { return cAttributesAttributeParserRuleCall_1_1_0; }
	}
	public class JointElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.shiro.mydbl0304.MyDbl.JointElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cElementsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cElementsElementParserRuleCall_0_0 = (RuleCall)cElementsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cWithKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cElementsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cElementsElementParserRuleCall_1_1_0 = (RuleCall)cElementsAssignment_1_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cInKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cWhichKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cConditionsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cConditionsJointConditionParserRuleCall_5_0 = (RuleCall)cConditionsAssignment_5.eContents().get(0);
		
		////find the teacher with student, in which
		//JointElement:
		//	elements+=Element ("with" elements+=Element)+ "," "in" "which" conditions=JointCondition;
		@Override public ParserRule getRule() { return rule; }
		
		//elements+=Element ("with" elements+=Element)+ "," "in" "which" conditions=JointCondition
		public Group getGroup() { return cGroup; }
		
		//elements+=Element
		public Assignment getElementsAssignment_0() { return cElementsAssignment_0; }
		
		//Element
		public RuleCall getElementsElementParserRuleCall_0_0() { return cElementsElementParserRuleCall_0_0; }
		
		//("with" elements+=Element)+
		public Group getGroup_1() { return cGroup_1; }
		
		//"with"
		public Keyword getWithKeyword_1_0() { return cWithKeyword_1_0; }
		
		//elements+=Element
		public Assignment getElementsAssignment_1_1() { return cElementsAssignment_1_1; }
		
		//Element
		public RuleCall getElementsElementParserRuleCall_1_1_0() { return cElementsElementParserRuleCall_1_1_0; }
		
		//","
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//"in"
		public Keyword getInKeyword_3() { return cInKeyword_3; }
		
		//"which"
		public Keyword getWhichKeyword_4() { return cWhichKeyword_4; }
		
		//conditions=JointCondition
		public Assignment getConditionsAssignment_5() { return cConditionsAssignment_5; }
		
		//JointCondition
		public RuleCall getConditionsJointConditionParserRuleCall_5_0() { return cConditionsJointConditionParserRuleCall_5_0; }
	}
	public class SingleConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.shiro.mydbl0304.MyDbl.SingleCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConditionsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cConditionsSingleConditionUnitParserRuleCall_0_0 = (RuleCall)cConditionsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cConditionsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cConditionsSingleConditionUnitParserRuleCall_1_1_0 = (RuleCall)cConditionsAssignment_1_1.eContents().get(0);
		
		////age is larger than 35, name equals Jack
		//SingleCondition:
		//	conditions+=SingleConditionUnit ("," conditions+=SingleConditionUnit)*;
		@Override public ParserRule getRule() { return rule; }
		
		//conditions+=SingleConditionUnit ("," conditions+=SingleConditionUnit)*
		public Group getGroup() { return cGroup; }
		
		//conditions+=SingleConditionUnit
		public Assignment getConditionsAssignment_0() { return cConditionsAssignment_0; }
		
		//SingleConditionUnit
		public RuleCall getConditionsSingleConditionUnitParserRuleCall_0_0() { return cConditionsSingleConditionUnitParserRuleCall_0_0; }
		
		//("," conditions+=SingleConditionUnit)*
		public Group getGroup_1() { return cGroup_1; }
		
		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//conditions+=SingleConditionUnit
		public Assignment getConditionsAssignment_1_1() { return cConditionsAssignment_1_1; }
		
		//SingleConditionUnit
		public RuleCall getConditionsSingleConditionUnitParserRuleCall_1_1_0() { return cConditionsSingleConditionUnitParserRuleCall_1_1_0; }
	}
	public class JointConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.shiro.mydbl0304.MyDbl.JointCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConditionsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cConditionsJointConditionUnitParserRuleCall_0_0 = (RuleCall)cConditionsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cConditionsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cConditionsJointConditionUnitParserRuleCall_1_1_0 = (RuleCall)cConditionsAssignment_1_1.eContents().get(0);
		
		////teacher’s class equals student’s class, teacher’s age is larger than student’s age
		//JointCondition:
		//	conditions+=JointConditionUnit ("," conditions+=JointConditionUnit)*;
		@Override public ParserRule getRule() { return rule; }
		
		//conditions+=JointConditionUnit ("," conditions+=JointConditionUnit)*
		public Group getGroup() { return cGroup; }
		
		//conditions+=JointConditionUnit
		public Assignment getConditionsAssignment_0() { return cConditionsAssignment_0; }
		
		//JointConditionUnit
		public RuleCall getConditionsJointConditionUnitParserRuleCall_0_0() { return cConditionsJointConditionUnitParserRuleCall_0_0; }
		
		//("," conditions+=JointConditionUnit)*
		public Group getGroup_1() { return cGroup_1; }
		
		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//conditions+=JointConditionUnit
		public Assignment getConditionsAssignment_1_1() { return cConditionsAssignment_1_1; }
		
		//JointConditionUnit
		public RuleCall getConditionsJointConditionUnitParserRuleCall_1_1_0() { return cConditionsJointConditionUnitParserRuleCall_1_1_0; }
	}
	public class SingleConditionUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.shiro.mydbl0304.MyDbl.SingleConditionUnit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAttributeLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAttributeLeftAttributeParserRuleCall_0_0 = (RuleCall)cAttributeLeftAssignment_0.eContents().get(0);
		private final Assignment cJudgementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cJudgementJudgementParserRuleCall_1_0 = (RuleCall)cJudgementAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cAttributeRightAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cAttributeRightAttributeParserRuleCall_2_0_0 = (RuleCall)cAttributeRightAssignment_2_0.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cValueBasicVarParserRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		
		////age is larger than 35 | age is less than graduateAge
		//SingleConditionUnit:
		//	attributeLeft=Attribute judgement=Judgement (attributeRight=Attribute | value=BasicVar);
		@Override public ParserRule getRule() { return rule; }
		
		//attributeLeft=Attribute judgement=Judgement (attributeRight=Attribute | value=BasicVar)
		public Group getGroup() { return cGroup; }
		
		//attributeLeft=Attribute
		public Assignment getAttributeLeftAssignment_0() { return cAttributeLeftAssignment_0; }
		
		//Attribute
		public RuleCall getAttributeLeftAttributeParserRuleCall_0_0() { return cAttributeLeftAttributeParserRuleCall_0_0; }
		
		//judgement=Judgement
		public Assignment getJudgementAssignment_1() { return cJudgementAssignment_1; }
		
		//Judgement
		public RuleCall getJudgementJudgementParserRuleCall_1_0() { return cJudgementJudgementParserRuleCall_1_0; }
		
		//(attributeRight=Attribute | value=BasicVar)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//attributeRight=Attribute
		public Assignment getAttributeRightAssignment_2_0() { return cAttributeRightAssignment_2_0; }
		
		//Attribute
		public RuleCall getAttributeRightAttributeParserRuleCall_2_0_0() { return cAttributeRightAttributeParserRuleCall_2_0_0; }
		
		//value=BasicVar
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }
		
		//BasicVar
		public RuleCall getValueBasicVarParserRuleCall_2_1_0() { return cValueBasicVarParserRuleCall_2_1_0; }
	}
	public class JointConditionUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.shiro.mydbl0304.MyDbl.JointConditionUnit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cElementLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cElementLeftAttributeOfElementParserRuleCall_0_0 = (RuleCall)cElementLeftAssignment_0.eContents().get(0);
		private final Assignment cJudgementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cJudgementJudgementParserRuleCall_1_0 = (RuleCall)cJudgementAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cElementRightAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cElementRightAttributeOfElementParserRuleCall_2_0_0 = (RuleCall)cElementRightAssignment_2_0.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cValueBasicVarParserRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		
		////teacher’s class equals student’s class | teacher’s age equals 20
		//JointConditionUnit:
		//	elementLeft=AttributeOfElement judgement=Judgement (elementRight=AttributeOfElement | value=BasicVar);
		@Override public ParserRule getRule() { return rule; }
		
		//elementLeft=AttributeOfElement judgement=Judgement (elementRight=AttributeOfElement | value=BasicVar)
		public Group getGroup() { return cGroup; }
		
		//elementLeft=AttributeOfElement
		public Assignment getElementLeftAssignment_0() { return cElementLeftAssignment_0; }
		
		//AttributeOfElement
		public RuleCall getElementLeftAttributeOfElementParserRuleCall_0_0() { return cElementLeftAttributeOfElementParserRuleCall_0_0; }
		
		//judgement=Judgement
		public Assignment getJudgementAssignment_1() { return cJudgementAssignment_1; }
		
		//Judgement
		public RuleCall getJudgementJudgementParserRuleCall_1_0() { return cJudgementJudgementParserRuleCall_1_0; }
		
		//(elementRight=AttributeOfElement | value=BasicVar)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//elementRight=AttributeOfElement
		public Assignment getElementRightAssignment_2_0() { return cElementRightAssignment_2_0; }
		
		//AttributeOfElement
		public RuleCall getElementRightAttributeOfElementParserRuleCall_2_0_0() { return cElementRightAttributeOfElementParserRuleCall_2_0_0; }
		
		//value=BasicVar
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }
		
		//BasicVar
		public RuleCall getValueBasicVarParserRuleCall_2_1_0() { return cValueBasicVarParserRuleCall_2_1_0; }
	}
	public class AttributeOfElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.shiro.mydbl0304.MyDbl.AttributeOfElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cElementAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cElementElementParserRuleCall_0_0 = (RuleCall)cElementAssignment_0.eContents().get(0);
		private final Keyword cSKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAttributeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAttributeAttributeParserRuleCall_2_0 = (RuleCall)cAttributeAssignment_2.eContents().get(0);
		
		//AttributeOfElement:
		//	element=Element "'s" attribute=Attribute;
		@Override public ParserRule getRule() { return rule; }
		
		//element=Element "'s" attribute=Attribute
		public Group getGroup() { return cGroup; }
		
		//element=Element
		public Assignment getElementAssignment_0() { return cElementAssignment_0; }
		
		//Element
		public RuleCall getElementElementParserRuleCall_0_0() { return cElementElementParserRuleCall_0_0; }
		
		//"'s"
		public Keyword getSKeyword_1() { return cSKeyword_1; }
		
		//attribute=Attribute
		public Assignment getAttributeAssignment_2() { return cAttributeAssignment_2; }
		
		//Attribute
		public RuleCall getAttributeAttributeParserRuleCall_2_0() { return cAttributeAttributeParserRuleCall_2_0; }
	}
	public class JudgementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.shiro.mydbl0304.MyDbl.Judgement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cIsKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cAsKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cEqualsKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cIsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cNotKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cNotKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cEqualsKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Keyword cIsKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLargerKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Keyword cThanKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Keyword cIsKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cLessKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Keyword cThanKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Keyword cNoKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cLessKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Keyword cThanKeyword_7_2 = (Keyword)cGroup_7.eContents().get(2);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Keyword cNoKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Keyword cLargerKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Keyword cThanKeyword_8_2 = (Keyword)cGroup_8.eContents().get(2);
		
		//Judgement:
		//	"is" | "as" | "equals" | "is" "not" | "not" "equals" | "is" "larger" "than" | "is" "less" "than" | "no" "less" "than"
		//	| "no" "larger" "than";
		@Override public ParserRule getRule() { return rule; }
		
		//"is" | "as" | "equals" | "is" "not" | "not" "equals" | "is" "larger" "than" | "is" "less" "than" | "no" "less" "than" |
		//"no" "larger" "than"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"is"
		public Keyword getIsKeyword_0() { return cIsKeyword_0; }
		
		//"as"
		public Keyword getAsKeyword_1() { return cAsKeyword_1; }
		
		//"equals"
		public Keyword getEqualsKeyword_2() { return cEqualsKeyword_2; }
		
		//"is" "not"
		public Group getGroup_3() { return cGroup_3; }
		
		//"is"
		public Keyword getIsKeyword_3_0() { return cIsKeyword_3_0; }
		
		//"not"
		public Keyword getNotKeyword_3_1() { return cNotKeyword_3_1; }
		
		//"not" "equals"
		public Group getGroup_4() { return cGroup_4; }
		
		//"not"
		public Keyword getNotKeyword_4_0() { return cNotKeyword_4_0; }
		
		//"equals"
		public Keyword getEqualsKeyword_4_1() { return cEqualsKeyword_4_1; }
		
		//"is" "larger" "than"
		public Group getGroup_5() { return cGroup_5; }
		
		//"is"
		public Keyword getIsKeyword_5_0() { return cIsKeyword_5_0; }
		
		//"larger"
		public Keyword getLargerKeyword_5_1() { return cLargerKeyword_5_1; }
		
		//"than"
		public Keyword getThanKeyword_5_2() { return cThanKeyword_5_2; }
		
		//"is" "less" "than"
		public Group getGroup_6() { return cGroup_6; }
		
		//"is"
		public Keyword getIsKeyword_6_0() { return cIsKeyword_6_0; }
		
		//"less"
		public Keyword getLessKeyword_6_1() { return cLessKeyword_6_1; }
		
		//"than"
		public Keyword getThanKeyword_6_2() { return cThanKeyword_6_2; }
		
		//"no" "less" "than"
		public Group getGroup_7() { return cGroup_7; }
		
		//"no"
		public Keyword getNoKeyword_7_0() { return cNoKeyword_7_0; }
		
		//"less"
		public Keyword getLessKeyword_7_1() { return cLessKeyword_7_1; }
		
		//"than"
		public Keyword getThanKeyword_7_2() { return cThanKeyword_7_2; }
		
		//"no" "larger" "than"
		public Group getGroup_8() { return cGroup_8; }
		
		//"no"
		public Keyword getNoKeyword_8_0() { return cNoKeyword_8_0; }
		
		//"larger"
		public Keyword getLargerKeyword_8_1() { return cLargerKeyword_8_1; }
		
		//"than"
		public Keyword getThanKeyword_8_2() { return cThanKeyword_8_2; }
	}
	public class DeleteInstructionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.shiro.mydbl0304.MyDbl.DeleteInstruction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRemoveKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cTheKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cElementAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementElementParserRuleCall_2_0 = (RuleCall)cElementAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cWhoseKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cConditionsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cConditionsSingleConditionParserRuleCall_5_0 = (RuleCall)cConditionsAssignment_5.eContents().get(0);
		
		////remove teacher, whose age is larger than graduateAge
		//DeleteInstruction:
		//	"remove" "the" element=Element "," "whose" conditions=SingleCondition;
		@Override public ParserRule getRule() { return rule; }
		
		//"remove" "the" element=Element "," "whose" conditions=SingleCondition
		public Group getGroup() { return cGroup; }
		
		//"remove"
		public Keyword getRemoveKeyword_0() { return cRemoveKeyword_0; }
		
		//"the"
		public Keyword getTheKeyword_1() { return cTheKeyword_1; }
		
		//element=Element
		public Assignment getElementAssignment_2() { return cElementAssignment_2; }
		
		//Element
		public RuleCall getElementElementParserRuleCall_2_0() { return cElementElementParserRuleCall_2_0; }
		
		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//"whose"
		public Keyword getWhoseKeyword_4() { return cWhoseKeyword_4; }
		
		//conditions=SingleCondition
		public Assignment getConditionsAssignment_5() { return cConditionsAssignment_5; }
		
		//SingleCondition
		public RuleCall getConditionsSingleConditionParserRuleCall_5_0() { return cConditionsSingleConditionParserRuleCall_5_0; }
	}
	
	
	private final DatabaseElements pDatabase;
	private final TerminalRule tSTRING;
	private final InstructionsElements pInstructions;
	private final CreateTableInstructionElements pCreateTableInstruction;
	private final TableElements pTable;
	private final CreateElementInstructionElements pCreateElementInstruction;
	private final ElementElements pElement;
	private final CreateAttributeInstructionElements pCreateAttributeInstruction;
	private final AttributeElements pAttribute;
	private final AttributeTypeElements pAttributeType;
	private final BasicVarElements pBasicVar;
	private final AddInstructionElements pAddInstruction;
	private final InsertInstructionElements pInsertInstruction;
	private final SetAttributeInstructionElements pSetAttributeInstruction;
	private final FindInstructionElements pFindInstruction;
	private final SingleElementElements pSingleElement;
	private final TargetElements pTarget;
	private final JointElementElements pJointElement;
	private final SingleConditionElements pSingleCondition;
	private final JointConditionElements pJointCondition;
	private final SingleConditionUnitElements pSingleConditionUnit;
	private final JointConditionUnitElements pJointConditionUnit;
	private final AttributeOfElementElements pAttributeOfElement;
	private final JudgementElements pJudgement;
	private final DeleteInstructionElements pDeleteInstruction;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDblGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pDatabase = new DatabaseElements();
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.shiro.mydbl0304.MyDbl.STRING");
		this.pInstructions = new InstructionsElements();
		this.pCreateTableInstruction = new CreateTableInstructionElements();
		this.pTable = new TableElements();
		this.pCreateElementInstruction = new CreateElementInstructionElements();
		this.pElement = new ElementElements();
		this.pCreateAttributeInstruction = new CreateAttributeInstructionElements();
		this.pAttribute = new AttributeElements();
		this.pAttributeType = new AttributeTypeElements();
		this.pBasicVar = new BasicVarElements();
		this.pAddInstruction = new AddInstructionElements();
		this.pInsertInstruction = new InsertInstructionElements();
		this.pSetAttributeInstruction = new SetAttributeInstructionElements();
		this.pFindInstruction = new FindInstructionElements();
		this.pSingleElement = new SingleElementElements();
		this.pTarget = new TargetElements();
		this.pJointElement = new JointElementElements();
		this.pSingleCondition = new SingleConditionElements();
		this.pJointCondition = new JointConditionElements();
		this.pSingleConditionUnit = new SingleConditionUnitElements();
		this.pJointConditionUnit = new JointConditionUnitElements();
		this.pAttributeOfElement = new AttributeOfElementElements();
		this.pJudgement = new JudgementElements();
		this.pDeleteInstruction = new DeleteInstructionElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("uk.ac.kcl.shiro.mydbl0304.MyDbl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Database:
	//	'create' 'database' 'named' name=ID
	//	instructions+=Instructions*;
	public DatabaseElements getDatabaseAccess() {
		return pDatabase;
	}
	
	public ParserRule getDatabaseRule() {
		return getDatabaseAccess().getRule();
	}
	
	//@Override
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"';
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	}
	
	//Instructions:
	//	CreateTableInstruction | CreateElementInstruction | CreateAttributeInstruction | AddInstruction | FindInstruction |
	//	DeleteInstruction;
	public InstructionsElements getInstructionsAccess() {
		return pInstructions;
	}
	
	public ParserRule getInstructionsRule() {
		return getInstructionsAccess().getRule();
	}
	
	//CreateTableInstruction:
	//	'create' 'a' 'table' 'named' table=Table element=CreateElementInstruction;
	public CreateTableInstructionElements getCreateTableInstructionAccess() {
		return pCreateTableInstruction;
	}
	
	public ParserRule getCreateTableInstructionRule() {
		return getCreateTableInstructionAccess().getRule();
	}
	
	//Table:
	//	name=ID;
	public TableElements getTableAccess() {
		return pTable;
	}
	
	public ParserRule getTableRule() {
		return getTableAccess().getRule();
	}
	
	//CreateElementInstruction:
	//	',' 'which' 'saves' 'data' 'of' element=Element;
	public CreateElementInstructionElements getCreateElementInstructionAccess() {
		return pCreateElementInstruction;
	}
	
	public ParserRule getCreateElementInstructionRule() {
		return getCreateElementInstructionAccess().getRule();
	}
	
	//Element:
	//	name=ID;
	public ElementElements getElementAccess() {
		return pElement;
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}
	
	//CreateAttributeInstruction:
	//	element=Element "has" "attribute" "named" attribute=Attribute "," "which" "is" attributeType=AttributeType;
	public CreateAttributeInstructionElements getCreateAttributeInstructionAccess() {
		return pCreateAttributeInstruction;
	}
	
	public ParserRule getCreateAttributeInstructionRule() {
		return getCreateAttributeInstructionAccess().getRule();
	}
	
	//Attribute:
	//	name=ID;
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}
	
	//AttributeType:
	//	"Binary" | "Varbinary" | "Image" | "Char" |
	//	"Varchar" | "Text" | "Nchar" | "Nvarchar" |
	//	"Ntext" | "Datetime" | "Smalldatetime" | "Date" |
	//	"TimeStamp" | "Integer" | "Double" | "Float";
	public AttributeTypeElements getAttributeTypeAccess() {
		return pAttributeType;
	}
	
	public ParserRule getAttributeTypeRule() {
		return getAttributeTypeAccess().getRule();
	}
	
	//BasicVar:
	//	integer=INT | string=STRING;
	public BasicVarElements getBasicVarAccess() {
		return pBasicVar;
	}
	
	public ParserRule getBasicVarRule() {
		return getBasicVarAccess().getRule();
	}
	
	////add a teacher with age of 40, subject of Math
	//AddInstruction:
	//	"add" "a" element=Element "with" insertInstruction=InsertInstruction;
	public AddInstructionElements getAddInstructionAccess() {
		return pAddInstruction;
	}
	
	public ParserRule getAddInstructionRule() {
		return getAddInstructionAccess().getRule();
	}
	
	////age of 40, subject of Math
	// InsertInstruction:
	//	setAttributeInstructions+=SetAttributeInstruction ("," setAttributeInstructions+=SetAttributeInstruction)*;
	public InsertInstructionElements getInsertInstructionAccess() {
		return pInsertInstruction;
	}
	
	public ParserRule getInsertInstructionRule() {
		return getInsertInstructionAccess().getRule();
	}
	
	////age of 40
	//SetAttributeInstruction:
	//	attribute=Attribute "of" attributeValue=BasicVar;
	public SetAttributeInstructionElements getSetAttributeInstructionAccess() {
		return pSetAttributeInstruction;
	}
	
	public ParserRule getSetAttributeInstructionRule() {
		return getSetAttributeInstructionAccess().getRule();
	}
	
	////find the teacher with student, in which teacher’s class equals student’s class
	////find the age of teacher whose age is larger than 35
	//FindInstruction:
	//	"find" "the" (SingleElement | JointElement);
	public FindInstructionElements getFindInstructionAccess() {
		return pFindInstruction;
	}
	
	public ParserRule getFindInstructionRule() {
		return getFindInstructionAccess().getRule();
	}
	
	////find the teacher whose | find the age of teacher whose 
	//SingleElement:
	//	(targets=Target "of")? element=Element ("," "whose" conditions=SingleCondition)?;
	public SingleElementElements getSingleElementAccess() {
		return pSingleElement;
	}
	
	public ParserRule getSingleElementRule() {
		return getSingleElementAccess().getRule();
	}
	
	//Target:
	//	attributes+=Attribute ("," attributes+=Attribute)*;
	public TargetElements getTargetAccess() {
		return pTarget;
	}
	
	public ParserRule getTargetRule() {
		return getTargetAccess().getRule();
	}
	
	////find the teacher with student, in which
	//JointElement:
	//	elements+=Element ("with" elements+=Element)+ "," "in" "which" conditions=JointCondition;
	public JointElementElements getJointElementAccess() {
		return pJointElement;
	}
	
	public ParserRule getJointElementRule() {
		return getJointElementAccess().getRule();
	}
	
	////age is larger than 35, name equals Jack
	//SingleCondition:
	//	conditions+=SingleConditionUnit ("," conditions+=SingleConditionUnit)*;
	public SingleConditionElements getSingleConditionAccess() {
		return pSingleCondition;
	}
	
	public ParserRule getSingleConditionRule() {
		return getSingleConditionAccess().getRule();
	}
	
	////teacher’s class equals student’s class, teacher’s age is larger than student’s age
	//JointCondition:
	//	conditions+=JointConditionUnit ("," conditions+=JointConditionUnit)*;
	public JointConditionElements getJointConditionAccess() {
		return pJointCondition;
	}
	
	public ParserRule getJointConditionRule() {
		return getJointConditionAccess().getRule();
	}
	
	////age is larger than 35 | age is less than graduateAge
	//SingleConditionUnit:
	//	attributeLeft=Attribute judgement=Judgement (attributeRight=Attribute | value=BasicVar);
	public SingleConditionUnitElements getSingleConditionUnitAccess() {
		return pSingleConditionUnit;
	}
	
	public ParserRule getSingleConditionUnitRule() {
		return getSingleConditionUnitAccess().getRule();
	}
	
	////teacher’s class equals student’s class | teacher’s age equals 20
	//JointConditionUnit:
	//	elementLeft=AttributeOfElement judgement=Judgement (elementRight=AttributeOfElement | value=BasicVar);
	public JointConditionUnitElements getJointConditionUnitAccess() {
		return pJointConditionUnit;
	}
	
	public ParserRule getJointConditionUnitRule() {
		return getJointConditionUnitAccess().getRule();
	}
	
	//AttributeOfElement:
	//	element=Element "'s" attribute=Attribute;
	public AttributeOfElementElements getAttributeOfElementAccess() {
		return pAttributeOfElement;
	}
	
	public ParserRule getAttributeOfElementRule() {
		return getAttributeOfElementAccess().getRule();
	}
	
	//Judgement:
	//	"is" | "as" | "equals" | "is" "not" | "not" "equals" | "is" "larger" "than" | "is" "less" "than" | "no" "less" "than"
	//	| "no" "larger" "than";
	public JudgementElements getJudgementAccess() {
		return pJudgement;
	}
	
	public ParserRule getJudgementRule() {
		return getJudgementAccess().getRule();
	}
	
	////remove teacher, whose age is larger than graduateAge
	//DeleteInstruction:
	//	"remove" "the" element=Element "," "whose" conditions=SingleCondition;
	public DeleteInstructionElements getDeleteInstructionAccess() {
		return pDeleteInstruction;
	}
	
	public ParserRule getDeleteInstructionRule() {
		return getDeleteInstructionAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
