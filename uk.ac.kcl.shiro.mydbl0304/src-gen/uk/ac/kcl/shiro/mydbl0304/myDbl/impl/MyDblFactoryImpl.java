/**
 * generated by Xtext 2.21.0
 */
package uk.ac.kcl.shiro.mydbl0304.myDbl.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import uk.ac.kcl.shiro.mydbl0304.myDbl.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class MyDblFactoryImpl extends EFactoryImpl implements MyDblFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static MyDblFactory init()
  {
    try
    {
      MyDblFactory theMyDblFactory = (MyDblFactory)EPackage.Registry.INSTANCE.getEFactory(MyDblPackage.eNS_URI);
      if (theMyDblFactory != null)
      {
        return theMyDblFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new MyDblFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MyDblFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case MyDblPackage.DATABASE: return createDatabase();
      case MyDblPackage.INSTRUCTIONS: return createInstructions();
      case MyDblPackage.CREATE_TABLE_INSTRUCTION: return createCreateTableInstruction();
      case MyDblPackage.TABLE: return createTable();
      case MyDblPackage.CREATE_ELEMENT_INSTRUCTION: return createCreateElementInstruction();
      case MyDblPackage.ELEMENT: return createElement();
      case MyDblPackage.CREATE_ATTRIBUTE_INSTRUCTION: return createCreateAttributeInstruction();
      case MyDblPackage.ATTRIBUTE: return createAttribute();
      case MyDblPackage.BASIC_VAR: return createBasicVar();
      case MyDblPackage.ADD_INSTRUCTION: return createAddInstruction();
      case MyDblPackage.INSERT_INSTRUCTION: return createInsertInstruction();
      case MyDblPackage.SET_ATTRIBUTE_INSTRUCTION: return createSetAttributeInstruction();
      case MyDblPackage.FIND_INSTRUCTION: return createFindInstruction();
      case MyDblPackage.SINGLE_ELEMENT: return createSingleElement();
      case MyDblPackage.TARGET: return createTarget();
      case MyDblPackage.JOINT_ELEMENT: return createJointElement();
      case MyDblPackage.SINGLE_CONDITION: return createSingleCondition();
      case MyDblPackage.JOINT_CONDITION: return createJointCondition();
      case MyDblPackage.SINGLE_CONDITION_UNIT: return createSingleConditionUnit();
      case MyDblPackage.JOINT_CONDITION_UNIT: return createJointConditionUnit();
      case MyDblPackage.ATTRIBUTE_OF_ELEMENT: return createAttributeOfElement();
      case MyDblPackage.DELETE_INSTRUCTION: return createDeleteInstruction();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Database createDatabase()
  {
    DatabaseImpl database = new DatabaseImpl();
    return database;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Instructions createInstructions()
  {
    InstructionsImpl instructions = new InstructionsImpl();
    return instructions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CreateTableInstruction createCreateTableInstruction()
  {
    CreateTableInstructionImpl createTableInstruction = new CreateTableInstructionImpl();
    return createTableInstruction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Table createTable()
  {
    TableImpl table = new TableImpl();
    return table;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CreateElementInstruction createCreateElementInstruction()
  {
    CreateElementInstructionImpl createElementInstruction = new CreateElementInstructionImpl();
    return createElementInstruction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Element createElement()
  {
    ElementImpl element = new ElementImpl();
    return element;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CreateAttributeInstruction createCreateAttributeInstruction()
  {
    CreateAttributeInstructionImpl createAttributeInstruction = new CreateAttributeInstructionImpl();
    return createAttributeInstruction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Attribute createAttribute()
  {
    AttributeImpl attribute = new AttributeImpl();
    return attribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BasicVar createBasicVar()
  {
    BasicVarImpl basicVar = new BasicVarImpl();
    return basicVar;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AddInstruction createAddInstruction()
  {
    AddInstructionImpl addInstruction = new AddInstructionImpl();
    return addInstruction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public InsertInstruction createInsertInstruction()
  {
    InsertInstructionImpl insertInstruction = new InsertInstructionImpl();
    return insertInstruction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SetAttributeInstruction createSetAttributeInstruction()
  {
    SetAttributeInstructionImpl setAttributeInstruction = new SetAttributeInstructionImpl();
    return setAttributeInstruction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FindInstruction createFindInstruction()
  {
    FindInstructionImpl findInstruction = new FindInstructionImpl();
    return findInstruction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SingleElement createSingleElement()
  {
    SingleElementImpl singleElement = new SingleElementImpl();
    return singleElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Target createTarget()
  {
    TargetImpl target = new TargetImpl();
    return target;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public JointElement createJointElement()
  {
    JointElementImpl jointElement = new JointElementImpl();
    return jointElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SingleCondition createSingleCondition()
  {
    SingleConditionImpl singleCondition = new SingleConditionImpl();
    return singleCondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public JointCondition createJointCondition()
  {
    JointConditionImpl jointCondition = new JointConditionImpl();
    return jointCondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SingleConditionUnit createSingleConditionUnit()
  {
    SingleConditionUnitImpl singleConditionUnit = new SingleConditionUnitImpl();
    return singleConditionUnit;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public JointConditionUnit createJointConditionUnit()
  {
    JointConditionUnitImpl jointConditionUnit = new JointConditionUnitImpl();
    return jointConditionUnit;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AttributeOfElement createAttributeOfElement()
  {
    AttributeOfElementImpl attributeOfElement = new AttributeOfElementImpl();
    return attributeOfElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DeleteInstruction createDeleteInstruction()
  {
    DeleteInstructionImpl deleteInstruction = new DeleteInstructionImpl();
    return deleteInstruction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MyDblPackage getMyDblPackage()
  {
    return (MyDblPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static MyDblPackage getPackage()
  {
    return MyDblPackage.eINSTANCE;
  }

} //MyDblFactoryImpl
